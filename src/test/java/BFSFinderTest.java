import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

@RunWith(MockitoJUnitRunner.class)
public class BFSFinderTest {

    Pacboard pacBoard;
    BFSFinder bfsFinder;

    @Test
    public void getMove() {

        pacBoard = Mockito.mock(Pacboard.class);

        Mockito.when(pacBoard.getM_x()).thenReturn(27);
        Mockito.when(pacBoard.getM_y()).thenReturn(29);

        int[][] dataMap = {{10, 20, 20, 20, 20, 20, 20, 20, 20, 11, 0, 0, 0, 10, 20, 11, 0, 0, 0, 10, 20, 20, 20, 20, 20, 20, 20, 20, 11}, {24, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 24}, {24, 0, 1, 6, 2, 0, 1, 2, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 24, 0, 1, 2, 0, 1, 6, 2, 0, 24}, {24, 0, 5, 9, 7, 0, 5, 7, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 24, 0, 5, 7, 0, 5, 9, 7, 0, 24}, {24, 0, 5, 9, 7, 0, 5, 7, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 24, 0, 5, 7, 0, 5, 9, 7, 0, 24}, {24, 0, 4, 8, 3, 0, 4, 3, 0, 13, 20, 20, 20, 12, 0, 13, 20, 20, 20, 12, 0, 4, 3, 0, 4, 8, 3, 0, 24}, {24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24}, {24, 0, 1, 6, 2, 0, 1, 6, 6, 6, 6, 6, 6, 2, 0, 1, 6, 6, 6, 6, 6, 6, 2, 0, 1, 6, 2, 0, 24}, {24, 0, 5, 9, 7, 0, 4, 8, 8, 8, 8, 8, 8, 3, 0, 4, 8, 8, 8, 8, 8, 8, 3, 0, 5, 9, 7, 0, 24}, {24, 0, 5, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 9, 7, 0, 24}, {24, 0, 5, 9, 7, 0, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 2, 0, 5, 9, 7, 0, 24}, {24, 0, 4, 8, 3, 0, 5, 7, 0, 5, 7, 0, 10, 20, 20, 20, 11, 0, 5, 7, 0, 5, 7, 0, 4, 8, 3, 0, 24}, {24, 0, 0, 0, 0, 0, 5, 7, 0, 4, 3, 0, 25, 0, 0, 0, 24, 0, 4, 3, 0, 5, 7, 0, 0, 0, 0, 0, 24}, {14, 20, 20, 20, 21, 0, 5, 7, 0, 0, 0, 0, 26, 0, 0, 0, 24, 0, 0, 0, 0, 5, 7, 0, 19, 20, 20, 20, 16}, {24, 0, 0, 0, 0, 0, 5, 7, 0, 1, 2, 0, 22, 0, 0, 0, 24, 0, 1, 2, 0, 5, 7, 0, 0, 0, 0, 0, 24}, {24, 0, 1, 6, 2, 0, 5, 7, 0, 5, 7, 0, 13, 20, 20, 20, 12, 0, 5, 7, 0, 5, 7, 0, 1, 6, 2, 0, 24}, {24, 0, 5, 9, 7, 0, 4, 3, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 4, 3, 0, 5, 9, 7, 0, 24}, {24, 0, 5, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 9, 7, 0, 24}, {24, 0, 5, 9, 7, 0, 1, 6, 6, 6, 6, 6, 6, 2, 0, 1, 6, 6, 6, 6, 6, 6, 2, 0, 5, 9, 7, 0, 24}, {24, 0, 4, 8, 3, 0, 4, 8, 8, 8, 8, 8, 8, 3, 0, 4, 8, 8, 8, 8, 8, 8, 3, 0, 4, 8, 3, 0, 24}, {24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24}, {24, 0, 1, 6, 2, 0, 1, 2, 0, 10, 20, 20, 20, 11, 0, 10, 20, 20, 20, 11, 0, 1, 2, 0, 1, 6, 2, 0, 24}, {24, 0, 5, 9, 7, 0, 5, 7, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 24, 0, 5, 7, 0, 5, 9, 7, 0, 24}, {24, 0, 5, 9, 7, 0, 5, 7, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 24, 0, 5, 7, 0, 5, 9, 7, 0, 24}, {24, 0, 4, 8, 3, 0, 4, 3, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 24, 0, 4, 3, 0, 4, 8, 3, 0, 24}, {24, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 24}, {13, 20, 20, 20, 20, 20, 20, 20, 20, 12, 0, 0, 0, 13, 20, 12, 0, 0, 0, 13, 20, 20, 20, 20, 20, 20, 20, 20, 12}};

        Mockito.when(pacBoard.getMap()).thenReturn(dataMap);

        bfsFinder = new BFSFinder(pacBoard);

        MoveType moveTye = bfsFinder.getMove(17, 14, 1, 5);

        assertThat(moveTye, equalTo(MoveType.LEFT));
    }
}